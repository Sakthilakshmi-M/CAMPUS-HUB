import java.util.*;
class NodesAtDistanceK {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int arr[] = new int[n];
    for(int i = 0 ; i < n ; i++) 
      arr[i] = sc.nextInt();
    
    TreeNode root = createTree(arr);
    System.out.println(distanceK(root,root,2));
  }
    public static HashMap<TreeNode,TreeNode> findParents(TreeNode root) {
        Queue<TreeNode> queue = new ArrayDeque<TreeNode>();
        HashMap<TreeNode,TreeNode> map = new HashMap<>();
        queue.add(root);

        while(!queue.isEmpty()) {
            TreeNode temp = queue.poll();
            if(temp.left != null) {
                map.put(temp.left,temp);
                queue.add(temp.left);
            }
            if(temp.right != null) {
                map.put(temp.right,temp);
                queue.add(temp.right);
            }
        }
        return map;
    }
    public static List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        HashMap<TreeNode,TreeNode> map = findParents(root);
        List<Integer> al = new ArrayList<Integer>();
        Queue<TreeNode> queue = new ArrayDeque<>();
        HashSet<TreeNode> visited = new HashSet<>();
        queue.add(target);
        visited.add(target);
        int distance = 0;
        while(distance < k && !queue.isEmpty())
        {
            int size = queue.size();
            distance+=1;
            for(int i = 0 ; i < size ; i++) {
                TreeNode temp = queue.poll();
                if(temp!=root && !visited.contains(map.get(temp))) {
                    queue.add(map.get(temp));
                    visited.add(map.get(temp));
                }

                if(temp.left != null && !visited.contains(temp.left)) {
                    queue.add(temp.left);
                    visited.add(temp.left);
                }
                
                if(temp.right != null && !visited.contains(temp.right)) {
                    queue.add(temp.right);
                    visited.add(temp.right);
                }
            }
        }
        for(TreeNode i:queue)
            al.add(i.value);
        return al;
    }


public static TreeNode createTree(int[] arr) {
  if(arr.length == 0) return null;
  TreeNode root = new TreeNode(arr[0]);
  Queue<TreeNode> queue = new LinkedList<>();
  queue.add(root);
  int i = 1;
  while( i < arr.length) {
    TreeNode temp = queue.poll();
    if( i < arr.length && arr[i] != -1) {
      temp.left = new TreeNode(arr[i]);
      queue.add(temp.left);
    }
    i++;
    if(i < arr.length && arr[i] != -1) {
      temp.right = new TreeNode(arr[i]);
      queue.add(temp.right);
    }
    i++;
  }
  return root;
}
}
class TreeNode {
  int value;
  TreeNode left , right;
  public TreeNode(int value) {
    this.value = value;
    left = right = null;
  }
}
